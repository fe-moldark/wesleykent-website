<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-08-09T19:28:02-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Wesley Kent</title><subtitle>A site dedicated to cybersecurity, pen testing, and personal projects.</subtitle><entry><title type="html">TryHackMe - Brooklyn Nine Nine</title><link href="http://localhost:4000/thm/2022/07/27/Brooklyn99.html" rel="alternate" type="text/html" title="TryHackMe - Brooklyn Nine Nine" /><published>2022-07-27T01:00:00-05:00</published><updated>2022-07-27T01:00:00-05:00</updated><id>http://localhost:4000/thm/2022/07/27/Brooklyn99</id><content type="html" xml:base="http://localhost:4000/thm/2022/07/27/Brooklyn99.html"><![CDATA[<h1 id="tryhackme---brooklyn-nine-nine">TryHackMe - Brooklyn Nine Nine</h1>

<p>As well as being an amusing TV show, the “Brooklyn Nine Nine” CTF proved to be a very straight forward exploit, but still good as a refresher. Let’s begin with our nmap scan:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Brooklyn99/nmap.png" /></p>
<p>We can access some files via an anonymous ftp login:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Brooklyn99/ftp.png" /></p>
<p>This note from Amy tells us Jake has a weak password meaning hydra can likely brute force it. Let’s run a hydra attack on the ssh port. Initially I got nothing from the using ‘Jake’ as the user, but ‘jake’ gives us a working password:<br /></p>
<p align="center"><img width="850" src="/assets/blog/THM-Brooklyn99/hydra.png" /></p>
<p>From our ssh login we find three users in the <code class="language-plaintext highlighter-rouge">/home</code> directory, and within the holt directory is the first flag. We do not have root permissions, but we can find a way around that. Let’s see what we can run:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Brooklyn99/sudo l.png" /></p>
<p>A quick search on gtfobins shows a possible exploit:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Brooklyn99/gtfo.png" /></p>
<p>We can run this as <code class="language-plaintext highlighter-rouge">sudo</code>, type in the <code class="language-plaintext highlighter-rouge">!/bin/sh</code>, and promptly get our root shell as seen below:<br /></p>
<p align="center"><img width="600" src="/assets/blog/THM-Brooklyn99/flag.png" /></p>
<p>And we have our root flag. Exploiting this machine was very simple and quite short in my opinion, but it’s never bad to work on the fundamentals. Cheers,<br /><br />
Wes<br /></p>]]></content><author><name>Wesley Kent</name></author><category term="THM" /><summary type="html"><![CDATA[TryHackMe - Brooklyn Nine Nine]]></summary></entry><entry><title type="html">TryHackMe - Break Out The Cage</title><link href="http://localhost:4000/thm/2022/06/11/BreakOutTheCage.html" rel="alternate" type="text/html" title="TryHackMe - Break Out The Cage" /><published>2022-06-11T01:00:00-05:00</published><updated>2022-06-11T01:00:00-05:00</updated><id>http://localhost:4000/thm/2022/06/11/BreakOutTheCage</id><content type="html" xml:base="http://localhost:4000/thm/2022/06/11/BreakOutTheCage.html"><![CDATA[<h1 id="tryhackme---break-out-the-cage">TryHackMe - Break Out The Cage</h1>

<p>Wherever you fall on the “Nick Cage being a great actor” scale, this is an amusing CTF to work through. Besides, Community has already tried to answer that question I think.
<br /><br />
For this challenge we looking for an initial login for a user “Weston”, and the user and root flags. Beginning with an initial nmap scan:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-BreakOutTheCage/initial nmap.png" /></p>
<p>3 ports are open to us - ftp (with anonymous logon), ssh on port 22, and a web page on port 80. To begin I started an initial gobuster scan in the background:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-BreakOutTheCage/useless dirb.png" /></p>
<p>Now this didn’t end up providing anything in the end since I found another way to access the machine but it’s still good practice. Moving on to what we know we have access to via ftp:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-BreakOutTheCage/ftp anonymous.png" /></p>
<p>This <code class="language-plaintext highlighter-rouge">dad_tasks</code> file we can access is encrypted in a way that didn’t immediately jump out at me, thankfully we have the internet. Using an online tool it determined it was likely encoded using Base64:<br /></p>
<p align="center"><img width="750" src="/assets/blog/THM-BreakOutTheCage/find out base64.png" /></p>
<p>Decoding with Base64 however doesn’t giving us the true form of the note since it is encrypted with yet another cipher. We can again identify the type, Vigenere, and use an online tool to break the cipher for us:<br /></p>
<p align="center"><img width="700" src="/assets/blog/THM-BreakOutTheCage/solved vigenere cipher.png" /></p>
<p>This will give us Weston’s password to gain our initial foothold on the machine. It’s worth noting I was running a hydra brute force attack against Weston on port 22, but safe to say it would never have cracked it. We can now login:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-BreakOutTheCage/use cipher pw to login on ssh.png" /></p>
<p>Since we can’t access anything from Cage’s home folder, I ran a quick <code class="language-plaintext highlighter-rouge">sudo -l</code> command as Weston:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-BreakOutTheCage/sudo dash l can edit.png" /></p>
<p>This didn’t end up helping too much as I recall. However, after being on the machine for a couple of minutes we get a broadcast message:<br /></p>
<p align="center"><img width="700" src="/assets/blog/THM-BreakOutTheCage/broadcast message.png" /></p>
<p>This indicates that maybe cronjob or something similar is running on the machine and spitting out these random lines. After identifying the file that is being run, we find out very quickly that it cannot be edited or modified with our current privileges:<br /></p>
<p align="center"><img width="600" src="/assets/blog/THM-BreakOutTheCage/cant edit file with vim.png" /></p>
<p>Also, annoyingly only vim is available on the device and not nano. Even though we cannot edit the file directly, we can affect the source of the quotes that the broadcast program draws from. Ultimately, we will probably want to start a reverse shell at some point, so let’s reference pentestmonkey for an example:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-BreakOutTheCage/pentest monkey bash how to reverse shell.png" /></p>
<p>After editing the IP / port to our liking, we can create a simple bash script to run the above command in the <code class="language-plaintext highlighter-rouge">/tmp</code> folder since we know we have write permissions there. Then, we can overwrite the quotes file while keeping an initial line for the broadcast message to print, and the second being the location of our custom reverse shell script. On our local machine we start the netcat listener and when the broadcast message next executes (should be within a couple of minutes) you should receive that shell.<br /></p>
<p align="center"><img width="700" src="/assets/blog/THM-BreakOutTheCage/secondflag from lsitnener.png" /></p>
<p>As seen above, the user flag is found in Cage’s home directory. In that same directory we find a folder with email backups that contains what can only be assumed to be a password that we can again identify as also being encrypted with the vigenere cipher. Unfortunately, we can’t crack it at face value but upon reading through the emails you can very easily find a keyword that is explicitly brought up numerous times, sometimes even in capital letters. They really toss you a bone on this part.<br /></p>
<p align="center"><img width="600" src="/assets/blog/THM-BreakOutTheCage/get root pw.png" /></p>
<p>This will give us the root password, and we can switch users over to them. <br /></p>
<p align="center"><img width="700" src="/assets/blog/THM-BreakOutTheCage/find a way to switch to root user.png" /></p>
<p>As you can see I had to call a better shell real quick before being able to switch to the root user.
<br /><br />
From there we can access the root directory and find the final flag.<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-BreakOutTheCage/and final root flag.png" /></p>
<p>And the box has been pwned. Cheers,<br /><br />
Wes<br /></p>]]></content><author><name>Wesley Kent</name></author><category term="THM" /><summary type="html"><![CDATA[TryHackMe - Break Out The Cage]]></summary></entry><entry><title type="html">TryHackMe - Dav</title><link href="http://localhost:4000/thm/2022/05/26/Dav.html" rel="alternate" type="text/html" title="TryHackMe - Dav" /><published>2022-05-26T01:00:00-05:00</published><updated>2022-05-26T01:00:00-05:00</updated><id>http://localhost:4000/thm/2022/05/26/Dav</id><content type="html" xml:base="http://localhost:4000/thm/2022/05/26/Dav.html"><![CDATA[<h1 id="tryhackme---dav">TryHackMe - Dav</h1>

<p>Let’s begin with an nmap scan:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Dav/nmap.png" /></p>
<p>Knowing port 80 is open and this a web server, let’s run gobuster against it:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Dav/useless gobuster.png" /></p>
<p>Now, this particular list provided nothing for me (although I’m sure another list might’ve worked), however I also ran a specific nmap scan on port 80 running the vuln script:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Dav/script vuln.png" /></p>
<p>And this <code class="language-plaintext highlighter-rouge">/webdav/</code> page prompts a login. Initial instinct is to turn to hydra and not knowing any hint of a username from anything on the webpage or the source code, I defaulted to <code class="language-plaintext highlighter-rouge">admin</code> for the username and the <code class="language-plaintext highlighter-rouge">rockyou.txt</code> wordlist for the password. That looked like the following:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Dav/hydra.png" /></p>
<p>Now, so far that hasn’t worked and was taking a long time and I got bored waiting after 5 minutes. So, very possibly admin isn’t the username or maybe it is but the password is something obscure. I checked for default login credentials for this <code class="language-plaintext highlighter-rouge">/webdav/</code> and found <code class="language-plaintext highlighter-rouge">jigsaw:jigsaw</code> which didn’t work, however the 3rd / 4th web result gave me <code class="language-plaintext highlighter-rouge">wampp:xampp</code> which did end up working. It bring us to this directory:<br /></p>
<p align="center"><img width="600" src="/assets/blog/THM-Dav/good login.png" /></p>
<p>And this password file will give us what appears to be a hash. Using <code class="language-plaintext highlighter-rouge">hash-identifier</code> we get the following:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Dav/hash pw.png" /></p>
<p>Now to run john against it:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Dav/attempt.png" /></p>
<p>As you can see I saved the hash to a file but John wasn’t able to crack it with the <code class="language-plaintext highlighter-rouge">Raw-MD5</code> format. Turning to online cracking tools provides nothing as well, and it’s also not clear where we could even use this for a second login location. So, what else is exploitable about this? Well, we do have a working login:pass and access to a web directory, sounds like a good time to try and upload a reverse shell. I’ll be using my default .php script for this - if you have ParrotOS/Kali Linux installed you should have a number of default reverse shells you can already use on your machine. Now to upload, some research leads to a useful StackOverflow post on how this can works:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Dav/curl.png" /></p>
<p>Normally I’ve used curl to get data instead of uploading it, but giving it a try results in:<br /></p>
<p align="center"><img width="850" src="/assets/blog/THM-Dav/success upload.png" /></p>
<p>It appears to work, and sure enough it has populated on the web server. Now to setup a netcat listener and we can run the script from the web page. Sure enough the listener lights up:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Dav/netcat.png" /></p>
<p>Easily get the first flag:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Dav/user flag.png" /></p>
<p>Running <code class="language-plaintext highlighter-rouge">sudo -l</code> reveals we can run <code class="language-plaintext highlighter-rouge">/bin/cat</code> as root, so let’s reference gtfobins for an exploit to escalate our privileges. Now - instead of defaulting to looking to gtfobins we can just realize that a) the flag is likely a <code class="language-plaintext highlighter-rouge">.txt</code> file named “flag”, or “root”, etc, and b) cat means just that - we can really just use cat to read the file if we can correctly guess the filename. And getting the root flag is as simple as follows:<br /></p>
<p align="center"><img width="850" src="/assets/blog/THM-Dav/root.png" /></p>
<p>Sure enough, I luckily guessed it the first time around and the box has been pwned. Cheers,<br /><br />
Wes<br /></p>]]></content><author><name>Wesley Kent</name></author><category term="THM" /><summary type="html"><![CDATA[TryHackMe - Dav]]></summary></entry><entry><title type="html">TryHackMe - Mr. Robot</title><link href="http://localhost:4000/thm/2022/05/01/Mr-Robot.html" rel="alternate" type="text/html" title="TryHackMe - Mr. Robot" /><published>2022-05-01T01:00:00-05:00</published><updated>2022-05-01T01:00:00-05:00</updated><id>http://localhost:4000/thm/2022/05/01/Mr-Robot</id><content type="html" xml:base="http://localhost:4000/thm/2022/05/01/Mr-Robot.html"><![CDATA[<h1 id="tryhackme---mr-robot">TryHackMe - Mr. Robot</h1>

<p>To start off, hands down the best show ever made. Now onto the box - there are three separate flags to find for this challenge. You’ll see a few times where I go off on trails that prove to not be useful, but I still think it’s important to document the process as a whole. Let’s begin with an nmap scan, host discovery disabled:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Mr-Robot/nmap.png" /></p>
<p>Seeing port 80 is open, let’s run gobuster in the background. I used the <code class="language-plaintext highlighter-rouge">common.txt</code> and small directory list you see below from SecLists for this scan:<br /></p>
<p align="center"><img width="850" src="/assets/blog/THM-Mr-Robot/gobuster.png" /></p>
<p>While this runs, let’s check out the site itself. We are met with what appears to be a linux terminal running within the browser:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Mr-Robot/title screen.png" /></p>
<p>All of the above commands you can run did not prove useful, at least to me. Perhaps there are multiple ways to pwn this box and I didn’t see whatever they had here.
<br /><br />
“Join” does prompt a message from Elliot and the option to enter our email address for “further information”. I used a throwaway e-mail and never received anything, so I’m unsure if this was meant as a misdirect or not.
<br /><br />
While I waited to see if an email ever actually arrived (like I said - it didn’t), I checked out some of the gobuster findings. One that stands out is wp-login - hydra loves web portals after all. Let’s capture the request in burpsuite:<br /></p>
<p align="center"><img width="850" src="/assets/blog/THM-Mr-Robot/burp.png" /></p>
<p>Before that, however, from the gobuster scan I did come across the following page:<br /></p>
<p align="center"><img width="600" src="/assets/blog/THM-Mr-Robot/cheeky.png" /></p>
<p>After looking through the other files for a minute, the <code class="language-plaintext highlighter-rouge">/robots</code> file reveals the following:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Mr-Robot/first flag1.png" /></p>
<p>And sure enough we can navigate to that location:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Mr-Robot/first flag2.png" /></p>
<p>First flag out of three, making progress, albeit slowly. There is also a file to download above the key. Now we can try using this as our new password list (or even as a user login?), however we are still missing a username to run against. Some default ideas are root, admin, fsociety, elliot, darlene, etc. but nothing that can be brute forced quickly. So I scoured every other directory, and the sub directories within each directory that I could as well as looking at the source code of each web page available. This ended up taking quite a long time and unfortunately did not provide anything useful.
<br /><br />
Meanwhile, the background was running a hydra brute force as seen below. It was looking for a 302 redirect as a successful login, no false positives from the onset so I think the syntax of it is setup correctly:<br /></p>
<p align="center"><img width="850" src="/assets/blog/THM-Mr-Robot/hydra.png" /></p>
<p>(Goes without saying, but I tested the default login credentials for WordPress and got nothing, still thought I should mention it however).
<br /><br />
From navigating around it appears WordPress is running version 4.3.1. This can be an avenue to go down with searchsploit later on if nothing else pops up. <code class="language-plaintext highlighter-rouge">/Image</code> brings us to a blog site with some entry fields - could be of interest later for potentially uploading reverse shells.
<br /><br />
We are insulted yet again…<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Mr-Robot/insult.png" /></p>
<p>Navigating around the rest of the directory list and common list from gobuster reveals a few files we can download or view, but ultimately nothing helpful comes from that.
<br /><br />
All that being said, the login page must be the next foothold. Going back there, there is one error they made in their error handling with logins - they indicate when a username does not exist <em>or</em> a message for when the password of a <em>user</em> is incorrect. It took more tries than I care to admit before I even noticed the different error messages, but we live and learn. We can see that “elliot” is in fact a valid username on this system.
<br /><br />
Running “sort” on the file we got initially made me realize a) there are hundreds of thousands of lines in this file, and b) there are a ton of duplicate entries - as in over 800,000 of them, which means our brute force would be running for days on end. Not ideal. If you’re running this yourself you’ll see what I mean very quickly. To save the output of unique lines only, I did the following:<br /></p>
<p align="center"><img width="450" src="/assets/blog/THM-Mr-Robot/sort by uniqueness.png" /></p>
<p>You can see how much this shrinks the file, and consequently the time for a brute force. After adjusting my initial hydra attack to use <code class="language-plaintext highlighter-rouge">elliot</code> instead of <code class="language-plaintext highlighter-rouge">fsociety</code> with the modified list and still a relatively long wait, we eventually see the following:<br /></p>
<p align="center"><img width="850" src="/assets/blog/THM-Mr-Robot/got the password for ellito.png" /></p>
<p>For those familiar with the show, that is Elliot’s employer number, but what really matters is we have a successful login. On a web browser we are redirected to the <code class="language-plaintext highlighter-rouge">wp-admin</code> page, formally a redirect to <code class="language-plaintext highlighter-rouge">wp-login</code>.
<br /><br />
On this site we see there are plugins that we can not only enable, but directly edit:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Mr-Robot/plugins.png" /></p>
<p>Now there is a lot to be said about exploiting plugins specifically, however in this case using a generic php reverse shell did the trick - literally the first result from a quick google search “using a php plugin to start a reverse shell” worked. Leverage the Internet’s resources…
<br /><br />
This code is practically the exact same you would see for when uploading a file of a reverse shell, just modified to work with my local machine (my tun0 address since I am using openvpn). Nothing fancy, I edited in my local IP and custom port and it ended up looking as simple as this:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Mr-Robot/custom code.png" /></p>
<p>After saving the plugin and then running the netcat listener, I immediately got the following shell:<br /></p>
<p align="center"><img width="700" src="/assets/blog/THM-Mr-Robot/reverse shell.png" /></p>
<p>And we’re in - we finally have a workable shell for the web server, now onto the second flag.
<br /><br />
While we can access the directory for <code class="language-plaintext highlighter-rouge">/home/robot</code>, we do not have permissions to view the file for the flag. I forgot to screenshot this but I also upgraded my shell with the ol’ faithful <code class="language-plaintext highlighter-rouge">python -c 'import pty;pty.spawn("/bin/bash")'</code> command. (Knowing that as well as the perl shell command will prove useful for future CTFs, trust me). There is another file that we <em>can</em> read here - <code class="language-plaintext highlighter-rouge">password.raw-md5</code>.
<br /><br />
Taking the hash to an online cracking tool I get the following output:<br /></p>
<p align="center"><img width="850" src="/assets/blog/THM-Mr-Robot/hashonline.png" /></p>
<p>John could’ve easily cracked this, but I went with an online tool for simplicity and speed’s sake, in other words I was feeling lazy. Now I can switch users to the <code class="language-plaintext highlighter-rouge">robot</code> user to view the second flag:<br /></p>
<p align="center"><img width="600" src="/assets/blog/THM-Mr-Robot/second flag.png" /></p>
<p>And just like that the second flag is ours. The third flag is no doubt in the <code class="language-plaintext highlighter-rouge">/root</code> folder, however a quick <code class="language-plaintext highlighter-rouge">sudo -l</code> unfortunately doesn’t give anything useful:<br /></p>
<p align="center"><img width="600" src="/assets/blog/THM-Mr-Robot/cant.png" /></p>
<p>Since we can’t run anything with sudo, let’s try looking for what files have SUID permissions that we can run:<br /></p>
<p align="center"><img width="850" src="/assets/blog/THM-Mr-Robot/find what can run.png" /></p>
<p>If you’ve seen any of my other posts you know that gtfobins is a great resource in these situations. After combing through these one by one, the first one I found an exploit with was the <code class="language-plaintext highlighter-rouge">/usr/local/bin/nmap</code> (another might exist, this was the first that I saw):<br /></p>
<p align="center"><img width="750" src="/assets/blog/THM-Mr-Robot/gtfobins.png" /></p>
<p>This spawns a workable root shell, and we can guess the filename of the third flag to read it in the <code class="language-plaintext highlighter-rouge">/root</code> directory:<br /></p>
<p align="center"><img width="600" src="/assets/blog/THM-Mr-Robot/final flag.png" /></p>
<p>And after obtaining the third flag the box has been successfully pwned. This took me a few hours to work through due to spending too much time on the various directories and files from the gobuster scan which proved less than useful, however I still got through it. Nothing too crazy about this CTF in my opinion, but a lot of different skills needed and a good work through. Cheers,<br /><br />
Wes<br /></p>]]></content><author><name>Wesley Kent</name></author><category term="THM" /><summary type="html"><![CDATA[TryHackMe - Mr. Robot]]></summary></entry><entry><title type="html">TryHackMe - TomGhost</title><link href="http://localhost:4000/thm/2022/04/18/TomGhost.html" rel="alternate" type="text/html" title="TryHackMe - TomGhost" /><published>2022-04-18T01:00:00-05:00</published><updated>2022-04-18T01:00:00-05:00</updated><id>http://localhost:4000/thm/2022/04/18/TomGhost</id><content type="html" xml:base="http://localhost:4000/thm/2022/04/18/TomGhost.html"><![CDATA[<h1 id="tryhackme---tomghost">TryHackMe - TomGhost</h1>

<p>Let’s begin with a simple nmap scan:<br /></p>
<p align="center"><img width="700" src="/assets/blog/THM-TomGhost/initial nmap.png" /></p>
<p>We can see there are a number of possible outlets we can sift through to exploit this machine. As we have the Apache Tomcat version, let’s do a quick search for any known exploits for it. The first result from exploit-db is conveniently called “Ghostcat”, and knowing the name of this box there is a fair chance this exploit will work. Let’s check it out on msfconsole:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-TomGhost/msf.png" /></p>
<p>We do find a user:pass from this auxiliary exploitand knowing that port 22 is open let try to ssh in:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-TomGhost/ssh.png" /></p>
<p>And it works. We find the following files:<br /></p>
<p align="center"><img width="550" src="/assets/blog/THM-TomGhost/ls.png" /></p>
<p>I tried to get these over to our local machine but scp didn’t work for whatever reason - whatever, so I started an http server to download them that way:<br /></p>
<p align="center"><img width="700" src="/assets/blog/THM-TomGhost/http server.png" /></p>
<p>Easy enough, navigate to the IP Address/port and download to your local machine. The .asc file is a pgp private key, so let’s try and brute force it. To start, let’s convert it to something John the Ripper can work with:<br /></p>
<p align="center"><img width="850" src="/assets/blog/THM-TomGhost/gpg2john.png" /></p>
<p>Now we can brute it with the default <code class="language-plaintext highlighter-rouge">rockyou.txt</code> wordlist. Since this isn’t my first run through you can see it doesn’t show the password outright, but it does output an answer:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-TomGhost/john.png" /></p>
<p>The gpg.txt is what I saved from the previous output of the gpg2john program we ran earlier.
<br /><br />
The password, ‘alexandru’, provides us the key needed to open the credential.pgp file. We do that with the following function:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-TomGhost/gpgg.png" /></p>
<p>And then entering the key below:</p>
<p align="center"><img width="600" src="/assets/blog/THM-TomGhost/enterpw.png" /></p>
<p>We will get another credential sequence we can use to ssh back in as another user.
<br /><br />
Once logged in, we see the user flag in the working directory:<br /></p>
<p align="center"><img width="600" src="/assets/blog/THM-TomGhost/usertxt.png" /></p>
<p>We have the user flag, however it’s clear I don’t have root access as this new user ‘merlin’. We can run <code class="language-plaintext highlighter-rouge">sudo -l</code> and see what he can run as root:<br /></p>
<p align="center"><img width="850" src="/assets/blog/THM-TomGhost/cantroot.png" /></p>
<p>From our scan, we are looking for a way to run the zip file / location as root, so let’s see what gtfobins has to offer on their website:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-TomGhost/gtfo.png" /></p>
<p>Let’s run the above, keeping in mind that as you’ll see in my work, we do need to add the <code class="language-plaintext highlighter-rouge">sudo</code> to get a root shell instead of the standard user’s shell:<br /></p>
<p align="center"><img width="700" src="/assets/blog/THM-TomGhost/finalll.png" /></p>
<p>And we have our root flag. Cheers,<br /><br />
Wes<br /></p>]]></content><author><name>Wesley Kent</name></author><category term="THM" /><summary type="html"><![CDATA[TryHackMe - TomGhost]]></summary></entry><entry><title type="html">TryHackMe - Simple CTF</title><link href="http://localhost:4000/thm/2022/04/03/Simple-CTF.html" rel="alternate" type="text/html" title="TryHackMe - Simple CTF" /><published>2022-04-03T01:00:00-05:00</published><updated>2022-04-03T01:00:00-05:00</updated><id>http://localhost:4000/thm/2022/04/03/Simple-CTF</id><content type="html" xml:base="http://localhost:4000/thm/2022/04/03/Simple-CTF.html"><![CDATA[<h1 id="tryhackme---simple-ctf">TryHackMe - Simple CTF</h1>

<p>As the name indicates, this is a simple CTF but it’s never bad to go back to the fundamentals. Let’s begin with an nmap scan:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Simple-CTF/nmap.png" /></p>
<p>We notice several open ports that answer the first couple questions for this box. We can enumerate port 80 further by running gobuster on it:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Simple-CTF/gobuster.png" /></p>
<p>This <code class="language-plaintext highlighter-rouge">/simple</code> directory leads us to a website for “CMS Made Simple”, and a quick google search for known exploits will find us a workable exploit (CVE) plus information about it for questions 3, 4 and 5.
<br /><br />
We can get its script from exploit-db:<br /></p>
<p align="center"><img width="700" src="/assets/blog/THM-Simple-CTF/exploitdb.png" /></p>
<p>It is a .py file, and from examining the code we know to run it will require several flags/arguments/whatever you choose to call them, including <code class="language-plaintext highlighter-rouge">-u</code>, <code class="language-plaintext highlighter-rouge">-w</code> and <code class="language-plaintext highlighter-rouge">-c</code>:<br /></p>
<p align="center"><img width="700" src="/assets/blog/THM-Simple-CTF/py.png" /></p>
<p>Let’s run this exploit now. Quick note, you may have to adjust some of the file, I had to in order to get it working with python3 as it is written in the older v2.7. And yes, below I ran the script as <code class="language-plaintext highlighter-rouge">python</code> and not explicitly <code class="language-plaintext highlighter-rouge">python3</code> but I think that’s becoming more common where the new standard has finally transitioned into using v3 by default. Maybe it’s just Parrot’s OS, not sure, anyway that looks like the following: <br /></p>
<p align="center"><img width="850" src="/assets/blog/THM-Simple-CTF/exploit.png" /></p>
<p>It reveals the following information for us:<br /></p>
<p align="center"><img width="600" src="/assets/blog/THM-Simple-CTF/pass.png" /></p>
<p>And the password is it at the bottom there.
<br /><br />
We can try to explicitly use these login credentials on the ssh login now, or try to find a login page on the website. Let’s start with ssh:
<br /><br />
And another learning moment: I initially tried to ssh on the default port, forgetting that ssh was running on port 2222 here, not 22. Let’s try and login, although it is possible that the hydra brute force might have worked given enough time initially.<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Simple-CTF/ssh in.png" /></p>
<p>It works, and we can get the <code class="language-plaintext highlighter-rouge">user.txt</code> from the working directory. We can find the other user to answer question 8 in the <code class="language-plaintext highlighter-rouge">/home</code> directory.
<br /><br />
Again, we can elevate our privileges after leveraging a quick <code class="language-plaintext highlighter-rouge">sudo -l</code> and looking to gtfobins for a corresponding exploit. I went with option B which was vim from their site and got a working shell with root privileges. That leads to this:<br /></p>
<p align="center"><img width="525" src="/assets/blog/THM-Simple-CTF/root.png" /></p>
<p>And that is all for this box. Cheers,<br /><br />
Wes</p>]]></content><author><name>Wesley Kent</name></author><category term="THM" /><summary type="html"><![CDATA[TryHackMe - Simple CTF]]></summary></entry><entry><title type="html">TryHackMe - Pickle Rick</title><link href="http://localhost:4000/thm/2022/03/13/Pickle-Rick.html" rel="alternate" type="text/html" title="TryHackMe - Pickle Rick" /><published>2022-03-13T00:00:00-06:00</published><updated>2022-03-13T00:00:00-06:00</updated><id>http://localhost:4000/thm/2022/03/13/Pickle-Rick</id><content type="html" xml:base="http://localhost:4000/thm/2022/03/13/Pickle-Rick.html"><![CDATA[<h1 id="tryhackme---pickle-rick">TryHackMe - Pickle Rick</h1>

<p>This was a genuinely enjoyable CTF to work through, there are a number of different skills that you will need to call on to exploit this. The theme is also amusing for those Rick &amp; Morty fans out there, but let’s go ahead and dive into it.<br /><br />
Let’s run our initial nmap scan against our target:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Pickle-Rick/nmap.png" /></p>
<p>Checking out the webpage, I saw from the source code that they did not clean up their code very well:<br /></p>
<p align="center"><img width="650" src="/assets/blog/THM-Pickle-Rick/username.png" /></p>
<p>We’ll use this later. Now, since this is running a web server after all let’s run gobuster / dirb on it in the background as we keep enumerating the different ports:<br /></p>
<p align="center"><img width="850" src="/assets/blog/THM-Pickle-Rick/gobuster.png" /></p>
<p>This <code class="language-plaintext highlighter-rouge">/assets</code> page won’t reveal anything useful unfortunately.
<br /><br />
We do, however, have a username and an open ssh port. Trying to run hydra against it does not work as it is blocked from remote login, so we know we will have to use that username elsewhere.
<br /><br />
Now from the nmap / gobuster scans we know that there is a <code class="language-plaintext highlighter-rouge">login.php</code> portal on the website:<br /></p>
<p align="center"><img width="550" src="/assets/blog/THM-Pickle-Rick/loginphp.png" /></p>
<p>Now we can try and use hydra to brute force this page, however we will need certain information about the login forum which we can get from burpsuite:<br /></p>
<p align="center"><img width="850" src="/assets/blog/THM-Pickle-Rick/burp.png" /></p>
<p>Now that we have the request, let’s run hydra using the information from line 22:<br /></p>
<p align="center"><img width="850" src="/assets/blog/THM-Pickle-Rick/hydra.png" /></p>
<p>While this runs in the background, let’s see what more we can discover about the web server using gobuster:<br /></p>
<p align="center"><img width="750" src="/assets/blog/THM-Pickle-Rick/flag1.png" /></p>
<p>From the rest of these results we can navigate to view these pages and we get a password on the right side of the above image. Let’s try to login into the .php portal now. This user/pass combination works, meaning we can stop our hydra attack, and we are forwarded to the below page:<br /></p>
<p align="center"><img width="650" src="/assets/blog/THM-Pickle-Rick/command panel.png" /></p>
<p>We can run a variety of commands, for example <code class="language-plaintext highlighter-rouge">whoami</code> and <code class="language-plaintext highlighter-rouge">ls</code>, but we are restricted from certain functions such as <code class="language-plaintext highlighter-rouge">cat somefile.ext</code>. Below we can see the results of the <code class="language-plaintext highlighter-rouge">ls</code> command:<br /></p>
<p align="center"><img width="500" src="/assets/blog/THM-Pickle-Rick/ls.png" /></p>
<p>Although we can’t <code class="language-plaintext highlighter-rouge">cat</code> the “super secret” file, we can view it in the web browser (as a page), and there we will get our first flag.
<br /><br />
We can also see which (if any) python is installed via the command panel, which it is:<br /></p>
<p align="center"><img width="700" src="/assets/blog/THM-Pickle-Rick/which python.png" /></p>
<p>Pentestmonkey is another great source of information alongside gtfobins, and we can use it to research how to try and start a reverse shell. We can get this shell up and running by establishing a netcat listener on our local machine and using the exploit from pentestmonkey (after modifying it of course):<br /></p>
<p align="center"><img width="850" src="/assets/blog/THM-Pickle-Rick/netcat.png" /></p>
<p>*It’s worth noting that if you have an a distribution like Parrot OS (which I am running) they might come installed with several default payloads and other common pentesting tools. 
<br /><br />
Regardless, once this netcat listener gets activated we can find a user “rick” in the <code class="language-plaintext highlighter-rouge">/home</code> directory, and within that the second flag:<br /></p>
<p align="center"><img width="600" src="/assets/blog/THM-Pickle-Rick/second flag.png" /></p>
<p>It is a safe bet to assume the last flag will be found in the root folder, which we currently don’t have access to. We can see what we do have access to with root permissions with <code class="language-plaintext highlighter-rouge">sudo -l</code>:<br /></p>
<p align="center"><img width="750" src="/assets/blog/THM-Pickle-Rick/sudo l.png" /></p>
<p>We can navigate to this directory and start a shell with root permissions:<br /></p>
<p align="center"><img width="600" src="/assets/blog/THM-Pickle-Rick/final.png" /></p>
<p>From there we can navigate to the <code class="language-plaintext highlighter-rouge">/root</code> folder. Inside we will find the last flag / “ingredient” for this box:<br /></p>
<p align="center"><img width="650" src="/assets/blog/THM-Pickle-Rick/root txt.png" /></p>
<p>And that is all for this box. Cheers,<br /><br />
Wes<br /></p>]]></content><author><name>Wesley Kent</name></author><category term="THM" /><summary type="html"><![CDATA[TryHackMe - Pickle Rick]]></summary></entry><entry><title type="html">TryHackMe - Lazy Admin</title><link href="http://localhost:4000/thm/2022/03/03/Lazy-Admin.html" rel="alternate" type="text/html" title="TryHackMe - Lazy Admin" /><published>2022-03-03T00:00:00-06:00</published><updated>2022-03-03T00:00:00-06:00</updated><id>http://localhost:4000/thm/2022/03/03/Lazy-Admin</id><content type="html" xml:base="http://localhost:4000/thm/2022/03/03/Lazy-Admin.html"><![CDATA[<h1 id="tryhackme---lazy-admin">TryHackMe - Lazy Admin</h1>

<p>This CTF has two flags to find, let’s get into it with the most basic nmap scan available (honestly no idea why I didn’t include the <code class="language-plaintext highlighter-rouge">-sC -sV</code> flags here, I must’ve been tired):<br /></p>
<p align="center"><img width="600" src="/assets/blog/THM-Lazy-Admin/nmap.png" /></p>
<p>Since this is running an open port 80 and we can open it in a browser, let’s try to enumerate some more directories and pages:<br /></p>
<p align="center"><img width="850" src="/assets/blog/THM-Lazy-Admin/gobuster.png" /></p>
<p>There we discover the <code class="language-plaintext highlighter-rouge">/content</code> folder, which we can also run against our wordlist as well:<br /></p>
<p align="center"><img width="850" src="/assets/blog/THM-Lazy-Admin/gobusterII.png" /></p>
<p>This gives us a number of paths that we can investigate, and after a lot of searching I discovered a couple of interesting things, the most obvious being a login forum at <code class="language-plaintext highlighter-rouge">/as</code>:<br /></p>
<p align="center"><img width="700" src="/assets/blog/THM-Lazy-Admin/slash as.png" /></p>
<p>Now, knowing this CTF is titled “Lazy Admin”, I am going to assume that this admin is using poor usernames/passwords, or default ones. As such, I looked at the get request through burpsuite for the username/password input names and attempted to brute force a password for an ‘admin’ and other similar usernames with hydra. Unfortunately, since I was just guessing the username nothing came of it, but it was worth a try since I just let it run in the background.
<br /><br />
Moving on, in the <code class="language-plaintext highlighter-rouge">/inc</code> subfolder we do find an old mysql backup file, which are always good to find. Inside that we find some useful text, including the username and what appears to be a hashed password.<br /></p>
<p align="center"><img width="700" src="/assets/blog/THM-Lazy-Admin/passwd.png" /></p>
<p>Now that we have found some kind of hashed password (in the above screenshot), we can try to crack it with John after identifying the hash type:<br /></p>
<p align="center"><img width="700" src="/assets/blog/THM-Lazy-Admin/hashidentifier.png" /></p>
<p>Now that we have the hash type, let’s run John against it:<br /></p>
<p align="center"><img width="700" src="/assets/blog/THM-Lazy-Admin/gottenpw.png" /></p>
<p>And we supposedly have a working user/pass, and trying to login on the <code class="language-plaintext highlighter-rouge">/as</code> site works. Also, from the backup sql file I now know that the username is actually ‘manager’, not the ‘admin’ I had previously guessed. Still a Lazy Admin choice, however, but moving on here is what we are greeted with after logging in:<br /></p>
<p align="center"><img width="700" src="/assets/blog/THM-Lazy-Admin/access.png" /></p>
<p>Now, after navigating around a bit there is a place where we can add an “ad”, which for me really meant I can just upload some custom code which may or may not accidentally start some kind of reverse shell.
<br /><br />
Again, a site that will prove very useful in these kinds of situations is pentestmonkey. After a quick ad upload test, we see the add runs as a php file, so let’s search pentestmonkey for an exploit that will work as that. The first option on there seems good enough, so let’s modify the script to our machine and set up a netcat listener.<br /></p>
<p align="center"><img width="700" src="/assets/blog/THM-Lazy-Admin/ad shell.png" /></p>
<p>From there, navigate to the site or curl the URL, whatever you want and our netcat listener should start a shell:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Lazy-Admin/got shell.png" /></p>
<p>It is simple enough to find the user flag, no different than any other box on THM. Now we do not have root access, but there is a way to get it with a quick <code class="language-plaintext highlighter-rouge">sudo -l</code> search:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Lazy-Admin/sudo l.png" /></p>
<p>We cannot edit this perl script directly, but we see that it runs a bash script, which we can check out. The “copy” script starts its own shell, all we have to do is edit in our own address and again another port with another listener to start a root shell for ourselves this time:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Lazy-Admin/get root.png" /></p>
<p>Once that happens, we’ll get a root shell in our other window and can easily get the root flag from there:<br /></p>
<p align="center"><img width="550" src="/assets/blog/THM-Lazy-Admin/root.png" /></p>
<p>And that is all for this box. Cheers,<br /><br />
Wes<br /></p>]]></content><author><name>Wesley Kent</name></author><category term="THM" /><summary type="html"><![CDATA[TryHackMe - Lazy Admin]]></summary></entry><entry><title type="html">TryHackMe - Bounty Hunter</title><link href="http://localhost:4000/thm/2022/02/27/Bounty-Hunter.html" rel="alternate" type="text/html" title="TryHackMe - Bounty Hunter" /><published>2022-02-27T00:00:00-06:00</published><updated>2022-02-27T00:00:00-06:00</updated><id>http://localhost:4000/thm/2022/02/27/Bounty-Hunter</id><content type="html" xml:base="http://localhost:4000/thm/2022/02/27/Bounty-Hunter.html"><![CDATA[<h1 id="tryhackme---bounty-hunter">TryHackMe - Bounty Hunter</h1>

<p>This CTF begins getting more interesting, as it involves ftp, hydra, and gtfobins for the first time. It is a relatively short CTF, so let’s go ahead and jump into it with an nmap scan:<br /></p>
<p align="center"><img width="700" src="/assets/blog/THM-Bounty-Hunter/initial nmap.png" /></p>
<p>After seeing the webpage, we can try to enumerate the webserver with gobuster:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Bounty-Hunter/failed gobuster.png" /></p>
<p>However, this gives us nothing else, and visiting the actual webpage also does not provide anything useful.
<br /><br />
There is still the anonymous ftp login, however. From the ftp login we can get several files that provide a potential password list to brute force as well as a potential username for ssh:<br /></p>
<p align="center"><img width="550" src="/assets/blog/THM-Bounty-Hunter/ftp anonymous.png" /></p>
<p>The possible username, <code class="language-plaintext highlighter-rouge">lin</code>, along with the password list completes a nice hydra brute force that looks as follows:<br /></p>
<p align="center"><img width="800" src="/assets/blog/THM-Bounty-Hunter/hydraandSSH.png" /></p>
<p>Once those credentials are found, we have our foothold and can locate the first flag:<br /></p>
<p align="center"><img width="450" src="/assets/blog/THM-Bounty-Hunter/usertxt.png" /></p>
<p>Now, we are not root, and do not have permissions to access the root folder on this machine. However, the useful <code class="language-plaintext highlighter-rouge">sudo -l</code> command does provide a path we might be able to use to escalate our privileges:<br /></p>
<p align="center"><img width="700" src="/assets/blog/THM-Bounty-Hunter/sudo-l.png" /></p>
<p>Here we see that <code class="language-plaintext highlighter-rouge">/bin/tar</code> can run root commands for us as the <code class="language-plaintext highlighter-rouge">lin</code> user. To exploit this we can search on gtfobins for a tar exploit and I quickly found the following:<br /></p>
<p align="center"><img width="700" src="/assets/blog/THM-Bounty-Hunter/gtfobins.png" /></p>
<p>Initially, I thought this exploit did not work because outright running this did not give a root shell. However all you have to do is add the <code class="language-plaintext highlighter-rouge">sudo</code> to the beginning since you are after all trying to run this as root. User error on my part…
<br /><br />
After adding the <code class="language-plaintext highlighter-rouge">sudo</code> in front, we are able to get our root shell and cat the file at its location in the <code class="language-plaintext highlighter-rouge">/root</code> directory:<br /></p>
<p align="center"><img width="850" src="/assets/blog/THM-Bounty-Hunter/running gtfo.png" /></p>
<p>Easy day. Cheers,<br /><br />
Wes<br /></p>]]></content><author><name>Wesley Kent</name></author><category term="THM" /><summary type="html"><![CDATA[TryHackMe - Bounty Hunter]]></summary></entry><entry><title type="html">TryHackMe - Simple NFS Exploit</title><link href="http://localhost:4000/thm/2022/02/17/NFS.html" rel="alternate" type="text/html" title="TryHackMe - Simple NFS Exploit" /><published>2022-02-17T00:00:00-06:00</published><updated>2022-02-17T00:00:00-06:00</updated><id>http://localhost:4000/thm/2022/02/17/NFS</id><content type="html" xml:base="http://localhost:4000/thm/2022/02/17/NFS.html"><![CDATA[<h1 id="simple-nfs-exploit">Simple NFS Exploit</h1>

<p>This simple CTF delves into NFS, or Network File System. NFS is probably best described as a way to locally browse through another systems directories and files after connecting to another system via mounting them. On to the box, our initial nmap scan reveals the following service running over port 2049:<br /></p>
<p align="center"><img width="700" src="/assets/blog/THM-NFS/nmap scan and nfs port.png" /></p>
<p>To view the shares over this port, I used:<br /></p>
<p align="center"><img width="575" src="/assets/blog/THM-NFS/show mount and mkdir tmp mount.png" /></p>
<p>Note the “/home” share from our scan.<br /><br />
Since we will be locally hosting these files we do not want to keep them here permanently, just for our exploitation of the box, so I mounted them in the <code class="language-plaintext highlighter-rouge">/tmp</code> directory:<br /></p>
<p align="center"><img width="650" src="/assets/blog/THM-NFS/mount to local machine.png" /></p>
<p>The -t tells us what device (here what protocol really), followed by the <code class="language-plaintext highlighter-rouge">IP:SHARE</code>, and the <code class="language-plaintext highlighter-rouge">/tmp/mount</code> is the directory we have created on our local machine.<br /><br />
It will take a second, but eventually the files load and we can navigate through them.<br /></p>
<p align="center"><img width="750" src="/assets/blog/THM-NFS/dir.png" /></p>
<p>We find the folder “cappucino” with a notable subdirectory, <code class="language-plaintext highlighter-rouge">.ssh</code>.
<br /><br />
Inside there we find a useful <code class="language-plaintext highlighter-rouge">rsa_id</code>, let’s go ahead and copy that to a more permanent location.
<br /><br />
As I’ve gone over in previous posts, go ahead and chmod the file with 600 permissions and then we’ll use it to attempt to ssh back into the target machine:<br /></p>
<p align="center"><img width="750" src="/assets/blog/THM-NFS/files id_rsa and ssh into box.png" /></p>
<p>Alright, we’ve got a foothold now, but we still to escalate our privileges to complete this CTF. TryHackMe steps in here and provides a useful bash script, it can be found on github by user polo-sec at  “writing/Security Challenge Walkthroughs/Networks 2/bash”.<br />
<br />
To use this script we will need to download it first, and then copy it to the NFS share:<br /></p>
<p align="center"><img width="750" src="/assets/blog/THM-NFS/copy to share for esclation.png" /></p>
<p>Here we now see our bash file in the mount share and we can confirm it is there on the target machine through our ssh login as well.<br />
To run the exploit we will need to change our permissions with <code class="language-plaintext highlighter-rouge">sudo chown root bash</code>, as well as <code class="language-plaintext highlighter-rouge">chmod +s bash</code> and <code class="language-plaintext highlighter-rouge">chmod +x bash</code>. This will change our script to executable, and once complete we can attempt to run the exploit from our ssh login:<br /></p>
<p align="center"><img width="600" src="/assets/blog/THM-NFS/run script to escalate.png" /></p>
<p>It works, and now we can navigate through the box as a whole and under <code class="language-plaintext highlighter-rouge">/root</code> we find our expected root flag:<br /></p>
<p align="center"><img width="750" src="/assets/blog/THM-NFS/finalll.png" /></p>
<p>And the box has been pwned. Cheers,<br /><br />
Wes<br /></p>]]></content><author><name>Wesley Kent</name></author><category term="THM" /><summary type="html"><![CDATA[Simple NFS Exploit]]></summary></entry></feed>